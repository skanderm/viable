defmodule Viable.Repo.Migrations.MigrateResources1 do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:systems, primary_key: false) do
      add :id, :uuid, null: false, primary_key: true
      add :name, :text
      add :description, :text
      add :type, :text
      add :inserted_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :updated_at, :utc_datetime_usec, null: false, default: fragment("now()")

      add :parent_id,
          references(:systems, column: :id, name: "systems_parent_id_fkey", type: :uuid)
    end

    create table(:environments, primary_key: false) do
      add :id, :uuid, null: false, primary_key: true
      add :name, :text
      add :description, :text
      add :inserted_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :updated_at, :utc_datetime_usec, null: false, default: fragment("now()")

      add :parent_id,
          references(:environments, column: :id, name: "environments_parent_id_fkey", type: :uuid)
    end

    create table(:channels, primary_key: false) do
      add :id, :uuid, null: false, primary_key: true
      add :name, :text
      add :description, :text
      add :inserted_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :updated_at, :utc_datetime_usec, null: false, default: fragment("now()")

      add :from_system_id,
          references(:systems, column: :id, name: "channels_from_system_id_fkey", type: :uuid)

      add :to_system_id,
          references(:systems, column: :id, name: "channels_to_system_id_fkey", type: :uuid)

      add :from_environment_id,
          references(:environments,
            column: :id,
            name: "channels_from_environment_id_fkey",
            type: :uuid
          )

      add :to_environment_id,
          references(:environments,
            column: :id,
            name: "channels_to_environment_id_fkey",
            type: :uuid
          )
    end
  end

  def down do
    drop constraint(:channels, "channels_to_environment_id_fkey")

    drop constraint(:channels, "channels_from_environment_id_fkey")

    drop constraint(:channels, "channels_to_system_id_fkey")

    drop constraint(:channels, "channels_from_system_id_fkey")

    drop table(:channels)

    drop constraint(:environments, "environments_parent_id_fkey")

    drop table(:environments)

    drop constraint(:systems, "systems_parent_id_fkey")

    drop table(:systems)
  end
end